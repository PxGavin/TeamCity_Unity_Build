using System;
using System.Text;
using UnityEngine;

namespace Backtrace.Unity.Model
{
    /// <summary>
    /// Unity message representation in Backtrace-Unity library
    /// </summary>
    internal class BacktraceUnityMessage
    {
        public readonly DateTime Date = DateTime.Now;
        private readonly bool _backtraceFrame = false;
        public string Message;
        public string StackTrace;
        public LogType Type;

        public BacktraceUnityMessage(BacktraceReport report)
        {
            if (report == null)
            {
                throw new ArgumentException("report");
            }
            _backtraceFrame = true;
            Message = report.Message;

            if (report.ExceptionTypeReport)
            {
                Type = LogType.Exception;
                StackTrace = report.Exception.StackTrace;
            }
            else
            {
                StackTrace = string.Empty;
                Type = LogType.Warning;
            }
        }
        public BacktraceUnityMessage(string message, string stacktrace, LogType type)
        {
            Message = message;
            StackTrace = stacktrace;
            Type = type;
        }

        /// <summary>
        /// Return information if current Unity message contain information about error or exception
        /// </summary>
        /// <returns>True if unity message is an exception/error message</returns>
        public bool IsUnhandledException()
        {
            return ((Type == LogType.Exception || Type == LogType.Error)
                && !string.IsNullOrEmpty(Message));
        }

        /// <summary>
        /// Convert Backtrace Untiy Message to string that will be acceptable by source code format
        /// </summary>
        /// <returns>Source code string</returns>
        public override string ToString()
        {
            var stringBuilder = new StringBuilder();
            // default log format
            stringBuilder.Append(
                string.Format(
                        "[{0}] {1}<{2}>: {3}",
                        Date.ToUniversalTime(),
                        _backtraceFrame ? "(Backtrace)" : string.Empty,
                        Enum.GetName(typeof(LogType),
                        Type),
                Message));

            // include stack trace if log was generated by exception/error
            if (IsUnhandledException())
            {
                var stackTrace = StackTrace;
                if (string.IsNullOrEmpty(StackTrace))
                {
                    stackTrace = "No stack trace available";
                }

                stackTrace = stackTrace.Trim();
                // remove last \n that looks ugly in web debugger
                if (stackTrace.EndsWith("\n"))
                {
                    stackTrace = stackTrace.Remove(stackTrace.LastIndexOf("\n"));
                }
                stringBuilder.AppendLine();
                stringBuilder.Append(stackTrace);
            }
            return stringBuilder.ToString();
        }
    }
}
